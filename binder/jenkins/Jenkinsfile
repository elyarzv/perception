pipeline {
  agent {
    docker { 
      image 'bentolor/docker-dind-awscli:2.3.4'
      args '--user=root -v /var/run/docker.sock:/var/run/docker.sock'
      label 'linux' 
      }
  }
  stages {
    stage('Build and Push') {
      when {
        anyOf { 
          branch 'main'; 
          branch 'develop';
          branch 'feature/*';
          branch 'bugfix/*';
          branch 'hotfix/*';
          branch 'release/*'
          }
      }
      steps {
        echo "Build number is ${currentBuild.number}"
        withCredentials([
          [
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AIS-AWS',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
            stsTokenDuration: 7200
          ]
        ]) {
          sh '''#!/bin/bash
          apk add --update alpine-sdk && apk add libffi-dev openssl-dev && apk --no-cache --update add build-base
          '''
          sh '''#!/bin/bash
          make docker-prune
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          echo ${TAG}
          make TAG="${TAG}"
          make docker-build-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-prod
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-prod
          '''
          sh '''#!/bin/bash
          make docker-prune
          '''
        }
      }
    }

      stage('tag') {
        when { buildingTag() }
        steps {
          echo "Build number is ${currentBuild.number}"
          withCredentials([
            [
              $class: 'AmazonWebServicesCredentialsBinding',
              credentialsId: 'AIS-AWS',
              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
              stsTokenDuration: 7200
           ]
          ]) {
          sh '''#!/bin/bash
          make docker-prune
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          echo ${TAG}
          make TAG="${TAG}"
          make docker-build-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-prod
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-prod
          '''
          sh '''#!/bin/bash
          make docker-prune
          '''
        }
       }
    }

    stage('Pull requests') {
      when {
        branch 'PR-*'
      }
      steps {
        echo "Build number is ${currentBuild.number}"
        withCredentials([
          [
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AIS-AWS',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
            stsTokenDuration: 7200
          ]
        ]) {
          sh '''#!/bin/bash
          apk add --update alpine-sdk && apk add libffi-dev openssl-dev && apk --no-cache --update add build-base
          '''
          sh '''#!/bin/bash
          make docker-prune
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          echo ${TAG}
          make TAG="${TAG}"
          make docker-build-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-build-prod
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-base
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-dev
          '''
          sh '''#!/bin/bash
          export TAG=`echo $GIT_BRANCH | tr / -`
          make TAG="${TAG}"
          make docker-login
          make docker-push-prod
          '''
          sh '''#!/bin/bash
          make docker-prune
          '''
        }
      }
    }
  }

  post {
    always {
      echo currentBuild.currentResult
      deleteDir() /* clean up our workspace */
      cleanWs()
    }
  }

  options {
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
    disableConcurrentBuilds()
  }
}
